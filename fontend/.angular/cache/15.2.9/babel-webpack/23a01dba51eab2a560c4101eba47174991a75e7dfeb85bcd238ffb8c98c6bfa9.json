{"ast":null,"code":"var _class;\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class CarrinhoService {\n  constructor() {\n    this.chaveCarrinho = 'carrinho';\n    this.carrinhoSubject = new BehaviorSubject([]);\n    const carrinhoString = localStorage.getItem(this.chaveCarrinho);\n    const carrinho = carrinhoString ? JSON.parse(carrinhoString) : [];\n    this.carrinhoSubject.next(carrinho);\n    this.http = HttpClient;\n  }\n  adicionarAoCarrinho(produto) {\n    const carrinhoAtual = [...this.carrinhoSubject.value];\n    // Verifica se o produto já está no carrinho\n    const produtoExistente = carrinhoAtual.find(p => p.id === produto.id);\n    if (produtoExistente) {\n      // Se o produto já estiver no carrinho, aumenta a quantidade\n      produtoExistente.quantidade += 1;\n    } else {\n      // Se o produto não estiver no carrinho, adiciona ao carrinho com quantidade inicial de 1\n      carrinhoAtual.push({\n        ...produto,\n        quantidade: 1\n      });\n    }\n    this.atualizarCarrinho(carrinhoAtual);\n  }\n  obterCarrinho() {\n    return this.carrinhoSubject.asObservable();\n  }\n  atualizarCarrinho(carrinho) {\n    localStorage.setItem(this.chaveCarrinho, JSON.stringify(carrinho));\n    this.carrinhoSubject.next(carrinho);\n  }\n  remover(id) {\n    const carrinhoAtual = [...this.carrinhoSubject.value];\n    this.atualizarCarrinho([]);\n    for (let i = 0; i < carrinhoAtual.length; i++) {\n      if (carrinhoAtual[i].id === id) {\n        carrinhoAtual.splice(i, 1);\n        break;\n      }\n    }\n    this.atualizarCarrinho(carrinhoAtual);\n  }\n  gravar(obj) {\n    return this.http.post(\"http://localhost:8081/api/pedido\", obj);\n  }\n}\n_class = CarrinhoService;\n_class.ɵfac = function CarrinhoService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,eAAe,QAAoB,MAAM;AAElD,SAASC,UAAU,QAAQ,sBAAsB;;AAKjD,OAAM,MAAOC,eAAe;EAM1BC;IALQ,kBAAa,GAAG,UAAU;IAE1B,oBAAe,GAA2B,IAAIH,eAAe,CAAQ,EAAE,CAAC;IAI9E,MAAMI,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,aAAa,CAAC;IAC/D,MAAMC,QAAQ,GAAGJ,cAAc,GAAGK,IAAI,CAACC,KAAK,CAACN,cAAc,CAAC,GAAG,EAAE;IACjE,IAAI,CAACO,eAAe,CAACC,IAAI,CAACJ,QAAQ,CAAC;IACnC,IAAI,CAACK,IAAI,GAAGZ,UAAU;EACxB;EAEOa,mBAAmB,CAACC,OAAY;IACrC,MAAMC,aAAa,GAAG,CAAC,GAAG,IAAI,CAACL,eAAe,CAACM,KAAK,CAAC;IAErD;IACA,MAAMC,gBAAgB,GAAGF,aAAa,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAEvE,IAAIH,gBAAgB,EAAE;MACpB;MACAA,gBAAgB,CAACI,UAAU,IAAI,CAAC;KACjC,MAAM;MACL;MACAN,aAAa,CAACO,IAAI,CAAC;QAAE,GAAGR,OAAO;QAAEO,UAAU,EAAE;MAAC,CAAE,CAAC;;IAGnD,IAAI,CAACE,iBAAiB,CAACR,aAAa,CAAC;EACvC;EAEAS,aAAa;IACX,OAAO,IAAI,CAACd,eAAe,CAACe,YAAY,EAAE;EAC5C;EAEQF,iBAAiB,CAAChB,QAAe;IACvCH,YAAY,CAACsB,OAAO,CAAC,IAAI,CAACpB,aAAa,EAAEE,IAAI,CAACmB,SAAS,CAACpB,QAAQ,CAAC,CAAC;IAClE,IAAI,CAACG,eAAe,CAACC,IAAI,CAACJ,QAAQ,CAAC;EACrC;EAEOqB,OAAO,CAACR,EAAO;IACpB,MAAML,aAAa,GAAG,CAAC,GAAG,IAAI,CAACL,eAAe,CAACM,KAAK,CAAC;IACrD,IAAI,CAACO,iBAAiB,CAAC,EAAE,CAAC;IAC1B,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,aAAa,CAACe,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAId,aAAa,CAACc,CAAC,CAAC,CAACT,EAAE,KAAKA,EAAE,EAAE;QAC9BL,aAAa,CAACgB,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;QAC1B;;;IAGJ,IAAI,CAACN,iBAAiB,CAACR,aAAa,CAAC;EACvC;EAEOiB,MAAM,CAACC,GAAU;IACpB,OAAO,IAAI,CAACrB,IAAI,CAACsB,IAAI,CAAQ,kCAAkC,EAAED,GAAG,CAAC;EACzE;;SArDWhC,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAkC,SAAflC,MAAe;EAAAmC,YAFd;AAAM","names":["BehaviorSubject","HttpClient","CarrinhoService","constructor","carrinhoString","localStorage","getItem","chaveCarrinho","carrinho","JSON","parse","carrinhoSubject","next","http","adicionarAoCarrinho","produto","carrinhoAtual","value","produtoExistente","find","p","id","quantidade","push","atualizarCarrinho","obterCarrinho","asObservable","setItem","stringify","remover","i","length","splice","gravar","obj","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Letticia_Tonon\\Downloads\\Vanessa\\Vanessa\\fontend\\src\\app\\service\\carrinho.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Cesta } from '../cesta/cesta.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CarrinhoService {\r\n  private chaveCarrinho = 'carrinho';\r\n\r\n  private carrinhoSubject: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\r\n  http: HttpClient;\r\n\r\n  constructor() {\r\n    const carrinhoString = localStorage.getItem(this.chaveCarrinho);\r\n    const carrinho = carrinhoString ? JSON.parse(carrinhoString) : [];\r\n    this.carrinhoSubject.next(carrinho);\r\n    this.http = HttpClient;\r\n  }\r\n\r\n  public adicionarAoCarrinho(produto: any): void {\r\n    const carrinhoAtual = [...this.carrinhoSubject.value];\r\n\r\n    // Verifica se o produto já está no carrinho\r\n    const produtoExistente = carrinhoAtual.find((p) => p.id === produto.id);\r\n\r\n    if (produtoExistente) {\r\n      // Se o produto já estiver no carrinho, aumenta a quantidade\r\n      produtoExistente.quantidade += 1;\r\n    } else {\r\n      // Se o produto não estiver no carrinho, adiciona ao carrinho com quantidade inicial de 1\r\n      carrinhoAtual.push({ ...produto, quantidade: 1 });\r\n    }\r\n\r\n    this.atualizarCarrinho(carrinhoAtual);\r\n  }\r\n\r\n  obterCarrinho(): Observable<any[]> {\r\n    return this.carrinhoSubject.asObservable();\r\n  }\r\n\r\n  private atualizarCarrinho(carrinho: any[]): void {\r\n    localStorage.setItem(this.chaveCarrinho, JSON.stringify(carrinho));\r\n    this.carrinhoSubject.next(carrinho);\r\n  }\r\n\r\n  public remover(id: any): void {\r\n    const carrinhoAtual = [...this.carrinhoSubject.value];\r\n    this.atualizarCarrinho([]);\r\n    for (let i = 0; i < carrinhoAtual.length; i++) {\r\n      if (carrinhoAtual[i].id === id) {\r\n        carrinhoAtual.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    this.atualizarCarrinho(carrinhoAtual);\r\n  }\r\n\r\n  public gravar(obj: Cesta): Observable<Cesta> {\r\n      return this.http.post<Cesta>(\"http://localhost:8081/api/pedido\", obj);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}