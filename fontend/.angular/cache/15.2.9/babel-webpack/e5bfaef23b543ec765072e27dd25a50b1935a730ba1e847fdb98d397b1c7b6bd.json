{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Cliente } from './cliente.model';\nlet ClienteComponent = class ClienteComponent {\n  constructor(clienteService, rotas) {\n    this.clienteService = clienteService;\n    this.rotas = rotas;\n    this.mensagem = \"\";\n    this.obj = new Cliente();\n    this.error = false;\n    this.lista = [];\n  }\n  ngOnInit() {\n    let id = this.rotas.snapshot.paramMap.get(\"id\");\n    if (id != null) {\n      this.obj.id = Number(id);\n      this.pesquisar();\n    }\n  }\n  mostrar() {\n    this.mensagem = \"Registro gravado com sucesso!\"; /* MENSAGEM DE CADASTRO*/\n    let clienteAux = new Cliente(this.obj);\n    this.lista.push(clienteAux);\n    window.localStorage.setItem('listaCliente', JSON.stringify(this.lista));\n  }\n  gravar() {\n    try {\n      this.clienteService.gravar(this.obj).subscribe(retorno => {\n        this.mensagem = \"Usuário cadastrado com sucesso!\";\n        this.error = false;\n      });\n    } catch {\n      this.mensagem = \"Cadastro inválido, verifique as informações e tente novamente.\";\n      this.error = true;\n    }\n  }\n  pesquisar() {\n    this.mensagem = \"\";\n    try {\n      this.clienteService.carregar(this.obj.id).subscribe(retorno => {\n        this.obj.email = retorno.email;\n        this.obj.nome = retorno.nome;\n        this.obj.sobrenome = retorno.sobrenome;\n        this.obj.cpf = retorno.cpf;\n        this.obj.senha = retorno.senha;\n        this.obj.telefone = retorno.telefone;\n        if (retorno.nome == null) this.mensagem = \"Registro não encontrado!\";\n      });\n    } catch {\n      this.mensagem = \"Ocorreu um erro, verifique!\";\n    }\n  }\n  remover() {\n    try {\n      this.clienteService.remover(this.obj.id);\n      this.mensagem = \"Cadastro removido com sucesso!\";\n    } catch {\n      this.mensagem = \"Ocorreu um erro durante o processo!\";\n    }\n  }\n};\nClienteComponent = __decorate([Component({\n  selector: 'app-cliente',\n  templateUrl: './cliente.component.html',\n  styleUrls: ['./cliente.component.css']\n})], ClienteComponent);\nexport { ClienteComponent };","map":{"version":3,"mappings":"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","names":["Component","Cliente","ClienteComponent","constructor","clienteService","rotas","ngOnInit","id","snapshot","paramMap","get","obj","Number","pesquisar","mostrar","mensagem","clienteAux","lista","push","window","localStorage","setItem","JSON","stringify","gravar","subscribe","retorno","error","carregar","email","nome","sobrenome","cpf","senha","telefone","remover","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Letticia_Tonon\\Downloads\\Vanessa\\Vanessa\\fontend\\src\\app\\cliente\\cliente.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Cliente } from './cliente.model';\nimport { ClienteService } from '../service/cliente.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-cliente',\n  templateUrl: './cliente.component.html',\n  styleUrls: ['./cliente.component.css']\n})\nexport class ClienteComponent {\n  mensagem: string = \"\";\n  obj: Cliente = new Cliente();\n  error = false;\n  lista: Cliente[] = [];\n\n  constructor(private clienteService: ClienteService,\n    private rotas: ActivatedRoute) { }\n\n  ngOnInit() {\n    let id = this.rotas.snapshot.paramMap.get(\"id\");\n    if (id != null) {\n      this.obj.id = Number(id);\n      this.pesquisar();\n    }\n  }\n\n  public mostrar() {\n    this.mensagem = \"Registro gravado com sucesso!\"; /* MENSAGEM DE CADASTRO*/\n    let clienteAux: Cliente = new Cliente(this.obj);\n    this.lista.push(clienteAux);\n    window.localStorage.setItem('listaCliente', JSON.stringify(this.lista));\n  }\n\n  public gravar() {\n    try {\n      this.clienteService.gravar(this.obj).subscribe(\n        (retorno: Cliente) => {\n          this.mensagem = \"Usuário cadastrado com sucesso!\";\n          this.error = false;\n        }\n      )\n    } catch {\n      this.mensagem = \"Cadastro inválido, verifique as informações e tente novamente.\";\n      this.error = true;\n    }\n  }\n\n  public pesquisar() {\n    this.mensagem = \"\";\n    try {\n      this.clienteService.carregar(this.obj.id).subscribe(\n        (retorno: Cliente) => {\n          this.obj.email = retorno.email;\n          this.obj.nome = retorno.nome;\n          this.obj.sobrenome = retorno.sobrenome;\n          this.obj.cpf = retorno.cpf;\n          this.obj.senha = retorno.senha;\n          this.obj.telefone = retorno.telefone;\n          if (retorno.nome == null) this.mensagem = \"Registro não encontrado!\";\n        });\n    }\n    catch {\n      this.mensagem = \"Ocorreu um erro, verifique!\";\n    }\n  }\n\n  public remover() {\n    try {\n      this.clienteService.remover(this.obj.id);\n      this.mensagem = \"Cadastro removido com sucesso!\";\n    }\n    catch {\n      this.mensagem = \"Ocorreu um erro durante o processo!\";\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}