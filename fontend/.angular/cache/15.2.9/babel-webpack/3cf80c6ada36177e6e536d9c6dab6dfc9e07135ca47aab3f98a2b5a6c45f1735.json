{"ast":null,"code":"var _class;\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CarrinhoService {\n  constructor() {\n    //   private carrinhoItems: any[] = [];\n    //   adicionarAoCarrinho(item: any, quantidade_estoque: number = 1) {\n    //       // Verificar se o item já está no carrinho\n    //       const itemExistente = this.carrinhoItems.find((i) => i.id === item.id);\n    //       if (itemExistente) {\n    //         itemExistente.quantidade += quantidade_estoque;\n    //       } else {\n    //           this.carrinhoItems.push({ ...item, quantidade_estoque });\n    //       }\n    //   }    \n    // removerDoCarrinho(item: any) {\n    //   const index = this.carrinhoItems.indexOf(item);\n    //   if (index !== -1) {\n    //     this.carrinhoItems.splice(index, 1);\n    //   }\n    // }\n    // obterCarrinhoItems() {\n    //   return this.carrinhoItems;\n    // }\n    // limparCarrinho() {\n    //   this.carrinhoItems = [];\n    // }\n    this.chaveCarrinho = 'carrinho';\n    this.carrinhoSubject = new BehaviorSubject({});\n    const carrinhoString = localStorage.getItem(this.chaveCarrinho);\n    const carrinho = carrinhoString ? JSON.parse(carrinhoString) : {};\n    this.carrinhoSubject.next(carrinho);\n  }\n  adicionarAoCarrinho(produto) {\n    const carrinhoAtual = {\n      ...this.carrinhoSubject.value\n    };\n    const idPedido = this.gerarIdPedido();\n    if (!carrinhoAtual[idPedido]) {\n      carrinhoAtual[idPedido] = [];\n    }\n    // Verifica se o produto já está no carrinho\n    const produtoExistente = carrinhoAtual[idPedido].find(p => p.id === produto.id);\n    if (produtoExistente) {\n      // Se o produto já estiver no carrinho, aumenta a quantidade\n      produtoExistente.quantidade += 1;\n    } else {\n      // Se o produto não estiver no carrinho, adiciona ao carrinho com quantidade inicial de 1\n      carrinhoAtual[idPedido].push({\n        ...produto,\n        quantidade: 1\n      });\n    }\n    this.atualizarCarrinho(carrinhoAtual);\n  }\n  obterCarrinho() {\n    return this.carrinhoSubject.asObservable();\n  }\n  atualizarCarrinho(carrinho) {\n    localStorage.setItem(this.chaveCarrinho, JSON.stringify(carrinho));\n    this.carrinhoSubject.next(carrinho);\n  }\n  limparCarrinho() {\n    this.atualizarCarrinho({});\n  }\n  // Função auxiliar para gerar um ID de pedido (pode ser ajustada conforme necessário)\n  gerarIdPedido() {\n    return 'pedido_' + Date.now().toString();\n  }\n}\n_class = CarrinhoService;\n_class.ɵfac = function CarrinhoService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,eAAe;EAmC1BC;IAlCA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IAEA;IAEA;IACA;IACQ,kBAAa,GAAG,UAAU;IAE1B,oBAAe,GAA8C,IAAIF,eAAe,CAA2B,EAAE,CAAC;IAGpH,MAAMG,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,aAAa,CAAC;IAC/D,MAAMC,QAAQ,GAAGJ,cAAc,GAAGK,IAAI,CAACC,KAAK,CAACN,cAAc,CAAC,GAAG,EAAE;IACjE,IAAI,CAACO,eAAe,CAACC,IAAI,CAACJ,QAAQ,CAAC;EACrC;EAEKK,mBAAmB,CAACC,OAAY;IACrC,MAAMC,aAAa,GAAG;MAAE,GAAG,IAAI,CAACJ,eAAe,CAACK;IAAK,CAAE;IACvD,MAAMC,QAAQ,GAAG,IAAI,CAACC,aAAa,EAAE;IAErC,IAAI,CAACH,aAAa,CAACE,QAAQ,CAAC,EAAE;MAC5BF,aAAa,CAACE,QAAQ,CAAC,GAAG,EAAE;;IAG9B;IACA,MAAME,gBAAgB,GAAGJ,aAAa,CAACE,QAAQ,CAAC,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKR,OAAO,CAACQ,EAAE,CAAC;IAEjF,IAAIH,gBAAgB,EAAE;MACpB;MACAA,gBAAgB,CAACI,UAAU,IAAI,CAAC;KACjC,MAAM;MACL;MACAR,aAAa,CAACE,QAAQ,CAAC,CAACO,IAAI,CAAC;QAAE,GAAGV,OAAO;QAAES,UAAU,EAAE;MAAC,CAAE,CAAC;;IAG7D,IAAI,CAACE,iBAAiB,CAACV,aAAa,CAAC;EACvC;EAEEW,aAAa;IACX,OAAO,IAAI,CAACf,eAAe,CAACgB,YAAY,EAAE;EAC5C;EAEQF,iBAAiB,CAACjB,QAAkC;IAC1DH,YAAY,CAACuB,OAAO,CAAC,IAAI,CAACrB,aAAa,EAAEE,IAAI,CAACoB,SAAS,CAACrB,QAAQ,CAAC,CAAC;IAClE,IAAI,CAACG,eAAe,CAACC,IAAI,CAACJ,QAAQ,CAAC;EACrC;EAEAsB,cAAc;IACZ,IAAI,CAACL,iBAAiB,CAAC,EAAE,CAAC;EAC5B;EAEA;EACQP,aAAa;IACnB,OAAO,SAAS,GAAGa,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAE;EAC1C;;SA/EW/B,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAgC,SAAfhC,MAAe;EAAAiC,YAFd;AAAM","names":["BehaviorSubject","CarrinhoService","constructor","carrinhoString","localStorage","getItem","chaveCarrinho","carrinho","JSON","parse","carrinhoSubject","next","adicionarAoCarrinho","produto","carrinhoAtual","value","idPedido","gerarIdPedido","produtoExistente","find","p","id","quantidade","push","atualizarCarrinho","obterCarrinho","asObservable","setItem","stringify","limparCarrinho","Date","now","toString","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Letticia_Tonon\\Downloads\\Vanessa\\Vanessa\\fontend\\src\\app\\service\\carrinho.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CarrinhoService {\r\n  //   private carrinhoItems: any[] = [];\r\n\r\n  //   adicionarAoCarrinho(item: any, quantidade_estoque: number = 1) {\r\n  //       // Verificar se o item já está no carrinho\r\n  //       const itemExistente = this.carrinhoItems.find((i) => i.id === item.id);\r\n    \r\n  //       if (itemExistente) {\r\n  //         itemExistente.quantidade += quantidade_estoque;\r\n  //       } else {\r\n  //           this.carrinhoItems.push({ ...item, quantidade_estoque });\r\n  //       }\r\n  //   }    \r\n\r\n  // removerDoCarrinho(item: any) {\r\n    \r\n  //   const index = this.carrinhoItems.indexOf(item);\r\n  //   if (index !== -1) {\r\n  //     this.carrinhoItems.splice(index, 1);\r\n  //   }\r\n  // }\r\n\r\n  // obterCarrinhoItems() {\r\n    \r\n  //   return this.carrinhoItems;\r\n  // }\r\n\r\n  // limparCarrinho() {\r\n    \r\n  //   this.carrinhoItems = [];\r\n  // }\r\n  private chaveCarrinho = 'carrinho';\r\n\r\n  private carrinhoSubject: BehaviorSubject<{ [key: string]: any[] }> = new BehaviorSubject<{ [key: string]: any[] }>({});\r\n\r\n  constructor() {\r\n    const carrinhoString = localStorage.getItem(this.chaveCarrinho);\r\n    const carrinho = carrinhoString ? JSON.parse(carrinhoString) : {};\r\n    this.carrinhoSubject.next(carrinho);\r\n  }\r\n\r\npublic adicionarAoCarrinho(produto: any): void {\r\n  const carrinhoAtual = { ...this.carrinhoSubject.value };\r\n  const idPedido = this.gerarIdPedido();\r\n\r\n  if (!carrinhoAtual[idPedido]) {\r\n    carrinhoAtual[idPedido] = [];\r\n  }\r\n\r\n  // Verifica se o produto já está no carrinho\r\n  const produtoExistente = carrinhoAtual[idPedido].find((p) => p.id === produto.id);\r\n\r\n  if (produtoExistente) {\r\n    // Se o produto já estiver no carrinho, aumenta a quantidade\r\n    produtoExistente.quantidade += 1;\r\n  } else {\r\n    // Se o produto não estiver no carrinho, adiciona ao carrinho com quantidade inicial de 1\r\n    carrinhoAtual[idPedido].push({ ...produto, quantidade: 1 });\r\n  }\r\n\r\n  this.atualizarCarrinho(carrinhoAtual);\r\n}\r\n\r\n  obterCarrinho(): Observable<{ [key: string]: any[] }> {\r\n    return this.carrinhoSubject.asObservable();\r\n  }\r\n\r\n  private atualizarCarrinho(carrinho: { [key: string]: any[] }): void {\r\n    localStorage.setItem(this.chaveCarrinho, JSON.stringify(carrinho));\r\n    this.carrinhoSubject.next(carrinho);\r\n  }\r\n\r\n  limparCarrinho(): void {\r\n    this.atualizarCarrinho({});\r\n  }\r\n\r\n  // Função auxiliar para gerar um ID de pedido (pode ser ajustada conforme necessário)\r\n  private gerarIdPedido(): string {\r\n    return 'pedido_' + Date.now().toString();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}