{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class CarrinhoService {\n  constructor() {\n    this.carrinhoItems = [];\n  }\n  adicionarAoCarrinho(item, quantidade = 1) {\n    // Verificar se o item já está no carrinho\n    const itemExistente = this.carrinhoItems.find(i => i.id === item.id);\n    if (itemExistente) {\n      // Se o item já estiver no carrinho, apenas atualize a quantidade\n      itemExistente.quantidade += quantidade;\n    } else {\n      // Caso contrário, adicione o item com a quantidade especificada\n      this.carrinhoItems.push({\n        ...item,\n        quantidade\n      });\n    }\n  }\n  removerDoCarrinho(item) {\n    const index = this.carrinhoItems.indexOf(item);\n    if (index !== -1) {\n      this.carrinhoItems.splice(index, 1);\n    }\n  }\n  obterCarrinhoItems() {\n    return this.carrinhoItems;\n  }\n  limparCarrinho() {\n    this.carrinhoItems = [];\n  }\n}\n_class = CarrinhoService;\n_class.ɵfac = function CarrinhoService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAKA,OAAM,MAAOA,eAAe;EAH5BC;IAIY,kBAAa,GAAU,EAAE;;EAEjCC,mBAAmB,CAACC,IAAS,EAAEC,aAAqB,CAAC;IACjD;IACA,MAAMC,aAAa,GAAG,IAAI,CAACC,aAAa,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKN,IAAI,CAACM,EAAE,CAAC;IAEtE,IAAIJ,aAAa,EAAE;MACjB;MACAA,aAAa,CAACD,UAAU,IAAIA,UAAU;KACvC,MAAM;MACL;MACA,IAAI,CAACE,aAAa,CAACI,IAAI,CAAC;QAAE,GAAGP,IAAI;QAAEC;MAAU,CAAE,CAAC;;EAEtD;EAEFO,iBAAiB,CAACR,IAAS;IAEzB,MAAMS,KAAK,GAAG,IAAI,CAACN,aAAa,CAACO,OAAO,CAACV,IAAI,CAAC;IAC9C,IAAIS,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACN,aAAa,CAACQ,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAEvC;EAEAG,kBAAkB;IAEhB,OAAO,IAAI,CAACT,aAAa;EAC3B;EAEAU,cAAc;IAEZ,IAAI,CAACV,aAAa,GAAG,EAAE;EACzB;;SAhCWN,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAiB,SAAfjB,MAAe;EAAAkB,YAFd;AAAM","names":["CarrinhoService","constructor","adicionarAoCarrinho","item","quantidade","itemExistente","carrinhoItems","find","i","id","push","removerDoCarrinho","index","indexOf","splice","obterCarrinhoItems","limparCarrinho","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\vaoliveira\\Desktop\\VANESSA\\ADS\\4 Semestre\\Programação web\\Vanessa\\fontend\\src\\app\\service\\carrinho.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CarrinhoService {\r\n    private carrinhoItems: any[] = [];\r\n\r\n    adicionarAoCarrinho(item: any, quantidade: number = 1) {\r\n        // Verificar se o item já está no carrinho\r\n        const itemExistente = this.carrinhoItems.find((i) => i.id === item.id);\r\n    \r\n        if (itemExistente) {\r\n          // Se o item já estiver no carrinho, apenas atualize a quantidade\r\n          itemExistente.quantidade += quantidade;\r\n        } else {\r\n          // Caso contrário, adicione o item com a quantidade especificada\r\n          this.carrinhoItems.push({ ...item, quantidade });\r\n        }\r\n    }    \r\n\r\n  removerDoCarrinho(item: any) {\r\n    \r\n    const index = this.carrinhoItems.indexOf(item);\r\n    if (index !== -1) {\r\n      this.carrinhoItems.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  obterCarrinhoItems() {\r\n    \r\n    return this.carrinhoItems;\r\n  }\r\n\r\n  limparCarrinho() {\r\n    \r\n    this.carrinhoItems = [];\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}