{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class CarrinhoService {}\n_class = CarrinhoService;\n_class.ɵfac = function CarrinhoService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;SAAfA,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAC,SAAfD,MAAe;EAAAE,YAFd;AAAM","names":["CarrinhoService","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Letticia_Tonon\\Downloads\\Vanessa\\Vanessa\\fontend\\src\\app\\service\\carrinho.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CarrinhoService {\r\n  //   private carrinhoItems: any[] = [];\r\n\r\n  //   adicionarAoCarrinho(item: any, quantidade_estoque: number = 1) {\r\n  //       // Verificar se o item já está no carrinho\r\n  //       const itemExistente = this.carrinhoItems.find((i) => i.id === item.id);\r\n    \r\n  //       if (itemExistente) {\r\n  //         itemExistente.quantidade += quantidade_estoque;\r\n  //       } else {\r\n  //           this.carrinhoItems.push({ ...item, quantidade_estoque });\r\n  //       }\r\n  //   }    \r\n\r\n  // removerDoCarrinho(item: any) {\r\n    \r\n  //   const index = this.carrinhoItems.indexOf(item);\r\n  //   if (index !== -1) {\r\n  //     this.carrinhoItems.splice(index, 1);\r\n  //   }\r\n  // }\r\n\r\n  // obterCarrinhoItems() {\r\n    \r\n  //   return this.carrinhoItems;\r\n  // }\r\n\r\n  // limparCarrinho() {\r\n    \r\n  //   this.carrinhoItems = [];\r\n  // }\r\n  // private chaveCarrinho = 'carrinho';\r\n\r\n  // private carrinhoSubject: BehaviorSubject<{ [key: string]: any[] }> = new BehaviorSubject<{ [key: string]: any[] }>({});\r\n\r\n  // constructor() {\r\n  //   const carrinhoString = localStorage.getItem(this.chaveCarrinho);\r\n  //   const carrinho = carrinhoString ? JSON.parse(carrinhoString) : {};\r\n  //   this.carrinhoSubject.next(carrinho);\r\n  // }\r\n\r\n  // public adicionarAoCarrinho(produto: any): void {\r\n  //   const carrinhoAtual = { ...this.carrinhoSubject.value };\r\n\r\n  //   // Gere uma chave única para o pedido (pode ser um ID aleatório)\r\n  //   const idPedido = this.gerarIdPedido();\r\n\r\n  //   if (!carrinhoAtual[idPedido]) {\r\n  //     carrinhoAtual[idPedido] = [];\r\n  //   }\r\n\r\n  //   // Verifica se o produto já está no carrinho\r\n  //   const produtoExistente = carrinhoAtual[idPedido].find((p) => p.id === produto.id);\r\n\r\n  //   if (produtoExistente) {\r\n  //     // Se o produto já estiver no carrinho, aumenta a quantidade\r\n  //     produtoExistente.quantidade += 1;\r\n  //   } else {\r\n  //     // Se o produto não estiver no carrinho, adiciona ao carrinho com quantidade inicial de 1\r\n  //     carrinhoAtual[idPedido].push({ ...produto, quantidade: 1 });\r\n  //   }\r\n\r\n  //   this.atualizarCarrinho(carrinhoAtual);\r\n  // }\r\n\r\n  // obterCarrinho(): Observable<{ [key: string]: any[] }> {\r\n  //   return this.carrinhoSubject.asObservable();\r\n  // }\r\n\r\n  // private atualizarCarrinho(carrinho: { [key: string]: any[] }): void {\r\n  //   localStorage.setItem(this.chaveCarrinho, JSON.stringify(carrinho));\r\n  //   this.carrinhoSubject.next(carrinho);\r\n  // }\r\n\r\n  // limparCarrinho(): void {\r\n  //   this.atualizarCarrinho({});\r\n  // }\r\n\r\n  // // Função auxiliar para gerar um ID de pedido (pode ser ajustada conforme necessário)\r\n  // private gerarIdPedido(): string {\r\n  //   return 'pedido_' + Date.now().toString();\r\n  // }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}